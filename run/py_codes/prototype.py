import socket, time, os
import subprocess as subp

home_dir = '/home/chengte'
qemu_path = home_dir + '/crax_exploit/build/qemu-release/i386-softmmu/qemu'
s2e_path = home_dir + '/crax_exploit/build/qemu-release/i386-s2e-softmmu/qemu'
image_path = home_dir + '/images/ubuntu12s.qcow2'
qemu_ctrl_port = 5555
qemu_ctrl_addr = ('0.0.0.0', qemu_ctrl_port)
ssh_fwd_port = 7777
ssh_fwd_port_s2e = 8888

config_file_path = home_dir + '/crax_exploit/run/linux.lua'

def open_qemu_mode(vm_name=None):
    if vm_name == None:
        qemu_args = (qemu_path, image_path, '-vnc', ':1', '-monitor', 'tcp::' + str(qemu_ctrl_port) + ',server,nowait', '-net', 'user,hostfwd=tcp::' + str(ssh_fwd_port) + '-:22', '-net', 'nic')
    else:
        qemu_args = (qemu_path, image_path, '-vnc', ':1', '-monitor', 'tcp::' + str(qemu_ctrl_port) + ',server,nowait', '-net', 'user,hostfwd=tcp::' + str(ssh_fwd_port) + '-:22', '-net', 'nic', '-loadvm', vm_name)
    try:
        qemu_p = subp.Popen(qemu_args, stdout=subp.PIPE, stderr=subp.PIPE, universal_newlines=True)
    except ValueError:
        print('Popen() is called with invalid arguments.')
    except OSError:
        print('Some errors occur when executing the subprocess.')
    else:
        print('Qemu pid:', qemu_p.pid)

def open_s2e_mode(vm_name=None):
    if vm_name == None:
        s2e_args = (s2e_path, image_path, '-vnc', ':1', '-monitor', 'tcp::' + str(qemu_ctrl_port) + ',server,nowait', '-net', 'user,hostfwd=tcp::' + str(ssh_fwd_port_s2e) + '-:22', '-net', 'nic', '-s2e-config-file', config_file_path, '-s2e-verbose')
    else:
        s2e_args = (s2e_path, image_path, '-vnc', ':1', '-monitor', 'tcp::' + str(qemu_ctrl_port) + ',server,nowait', '-net', 'user,hostfwd=tcp::' + str(ssh_fwd_port_s2e) + '-:22', '-net', 'nic', '-s2e-config-file', config_file_path, '-s2e-verbose', '-loadvm', vm_name)
    try:
        s2e_p = subp.Popen(s2e_args, stdout=subp.PIPE, stderr=subp.PIPE, universal_newlines=True)
    except ValueError:
        print('Popen() is called with invalid arguments.')
    except OSError:
        print('Some errors occur when executing the subprocess.')
    else:
        print('Qemu (s2e mode) pid:', s2e_p.pid)

def control_qemu(cmd):
    time.sleep(3)
    try:
        qemu_sock = socket.socket()
        qemu_sock.connect(qemu_ctrl_addr)
    except socket.error:
        print('Some errors occur about socket.')
    else:
        print('Prepare to execute \"' + cmd + '\"')
        qemu_sock.sendall(bytes(cmd + '\n', 'ascii'))
    finally:
        qemu_sock.close()


def ssh_guest(cmd, s2e_mode=False, iden_file=None, retry_n=3):
    time.sleep(2)
    retry_count = retry_n
    fwd_port = 0
    if s2e_mode:
        fwd_port = ssh_fwd_port_s2e
    else:
        fwd_port = ssh_fwd_port
    ssh_args = ['ssh', '-p', str(fwd_port), 'chengte@0.0.0.0', cmd]
    if iden_file != None:
        ssh_args.insert(1, '-i')
        ssh_args.insert(2, iden_file)
    while True:
        try:
            ssh_p = subp.Popen(ssh_args, stdout=subp.PIPE, stderr=subp.PIPE, universal_newlines=True)
        except ValueError:
            print('Popen() is called with invalid arguments.')
            break
        except OSError:
            print('Some errors occur when executing the subprocess.')
            break
        else:
            outs, errs = ssh_p.communicate()
            print(outs)
            print('---------------')
            print(errs)
            if retry_count == 0:
                print('No remaining retry chance.')
                break
            if errs.find('Connection closed by remote host') == -1 and errs.find('Connection refused') == -1:
                break
            time.sleep(1)
            retry_count -= 1

def scp_guest(item_path, is_directory=False, base_dir=home_dir, retry_n=3):
    time.sleep(2)
    retry_count = retry_n
    if is_directory:
        scp_args = ('scp', '-P', str(ssh_fwd_port), '-r', base_dir + '/' + item_path, 'chengte@0.0.0.0:')
    else:
        scp_args = ('scp', '-P', str(ssh_fwd_port), base_dir + '/' + item_path, 'chengte@0.0.0.0:')
    while True:
        try:
            scp_p = subp.Popen(scp_args, stdout=subp.PIPE, stderr=subp.PIPE, universal_newlines=True)
        except ValueError:
            print('Popen() is called with invalid arguments.')
            break
        except OSError:
            print('Some errors occur when executing the subprocess.')
            break
        else:
            outs, errs = scp_p.communicate()
            print(outs)
            print('---------------')
            print(errs)
            if retry_count == 0:
                print('No remaining retry chance.')
                break
            if errs.find('Connection closed by remote host') == -1:
                break
            time.sleep(1)
            retry_count -= 1
